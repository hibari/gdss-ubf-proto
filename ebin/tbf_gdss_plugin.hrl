
-ifndef('gdss.hrl').
-define('gdss.hrl', true).


%%%
%%% Auto-generated by ubf_utils:ubf_contract()
%%% Do not edit manually!
%%%

%% --------------------
%% pre defined types
%%   - left hand-side is UBF
%%   - right hand-side is Erlang-like
%%   - A() means replace with "A type reference"
%%   - A() | B() means "A() or B()"
%%   - A()? means "optional A()"
%%   - A(Attrs) means "A() subject to the comma-delimited type attributes
%%
%%
%% true
%%		true
%% false
%%		false
%% undefined
%%		undefined
%%
%% any()
%%		any
%% any()?
%%		any | undefined
%%
%% none()
%%		 /* no result is returned */
%% none()?
%%		 /* no result is returned */ | undefined
%%
%% atom()
%%		atom
%% atom()?
%%		atom | undefined
%%
%% binary()
%%		binary
%% binary()?
%%		binary | undefined
%%
%% float()
%%		float
%% float()?
%%		float | undefined
%%
%% integer()
%%		integer
%% integer()?
%%		integer | undefined
%%
%% list()
%%		list
%% list()?
%%		list | undefined
%%
%% tuple()
%%		tuple
%% tuple()?
%%		tuple | undefined
%%
%% --------------------
%% type attributes
%%
%%
%% any(AnyAttrs)
%%		any
%% any(AnyAttrs)?
%%		any | undefined
%%
%% atom(AtomAttrs)
%%		atom
%% atom(AtomAttrs)?
%%		atom | undefined
%%
%% binary(BinaryAttrs)
%%		binary
%% binary(BinaryAttrs)?
%%		binary | undefined
%%
%% list(ListAttrs)
%%		list
%% list(ListAttrs)?
%%		list | undefined
%%
%% tuple(TupleAttrs)
%%		tuple
%% tuple(TupleAttrs)?
%%		tuple | undefined
%%
%%
%% AnyAttrs
%% 	 nonempty
%% 	 nonundefined
%%
%% AtomAttrs
%% 	 ascii | asciiprintable
%% 	 nonempty
%% 	 nonundefined
%%
%% BinaryAttrs
%% 	 ascii | asciiprintable
%% 	 nonempty
%%
%% ListAttrs
%% 	 nonempty
%%
%% TupleAttrs
%% 	 nonempty
%%
%% --------------------
%% user-defined attributes
%%
%%
%% {type1() ...}
%%		tuple
%% {type1() ...}?
%%		tuple | undefined
%%
%% record()
%%		record
%% record()?
%%		record | undefined
%%
%% [type()]
%%		list of type()
%% [type()]?
%%		list of length 0 or length 1 of type()
%% [type()]+
%%		list of length greater than 0 of type()
%% [type()]{M}
%%		list of length M of type()
%% [type()]{M,}
%%		list of minimum length M of type()
%% [type()]{,M}
%%		list of maximum length M of type()
%% [type()]{M,N}
%%		list of minimum length M and maximum length N of type()
%%
%% integer()..integer()
%%		integer
%% ..integer()
%%		integer
%% integer()..
%%		integer


%% --------------------
%% records
%%





%% --------------------
%% leaf types
%%


%% add()
%%	{ struct, name(), [field_table() | field_key() | field_val()] }

-ifndef('$ubf_type_add').
-define('$ubf_type_add', true).
-type 'add'() :: 
	{ struct, name(), [field_table() | field_key() | field_val()] }.
-endif.

%% contract()
%%	binary()

-ifndef('$ubf_type_contract').
-define('$ubf_type_contract', true).
-type 'contract'() :: 
	binary().
-endif.

%% delete()
%%	{ struct, name(), [field_table() | field_key() | field_must_exist()] }

-ifndef('$ubf_type_delete').
-define('$ubf_type_delete', true).
-type 'delete'() :: 
	{ struct, name(), [field_table() | field_key() | field_must_exist()] }.
-endif.

%% description()
%%	binary()

-ifndef('$ubf_type_description').
-define('$ubf_type_description', true).
-type 'description'() :: 
	binary().
-endif.

%% field_is_witness()
%%	{ field, name(), 'T-BOOL', 3, is_witness() }

-ifndef('$ubf_type_field_is_witness').
-define('$ubf_type_field_is_witness', true).
-type 'field_is_witness'() :: 
	{ field, name(), 'T-BOOL', 3, is_witness() }.
-endif.

%% field_key()
%%	{ field, name(), 'T-BINARY', 2, key() }

-ifndef('$ubf_type_field_key').
-define('$ubf_type_field_key', true).
-type 'field_key'() :: 
	{ field, name(), 'T-BINARY', 2, key() }.
-endif.

%% field_must_exist()
%%	{ field, name(), 'T-BOOL', 3, must_exist() }

-ifndef('$ubf_type_field_must_exist').
-define('$ubf_type_field_must_exist', true).
-type 'field_must_exist'() :: 
	{ field, name(), 'T-BOOL', 3, must_exist() }.
-endif.

%% field_table()
%%	{ field, name(), 'T-BINARY', 1, table() }

-ifndef('$ubf_type_field_table').
-define('$ubf_type_field_table', true).
-type 'field_table'() :: 
	{ field, name(), 'T-BINARY', 1, table() }.
-endif.

%% field_timestamp()
%%	{ field, name(), 'T-I64', 1, timestamp() }

-ifndef('$ubf_type_field_timestamp').
-define('$ubf_type_field_timestamp', true).
-type 'field_timestamp'() :: 
	{ field, name(), 'T-I64', 1, timestamp() }.
-endif.

%% field_val()
%%	{ field, name(), 'T-BINARY', 3, val() }

-ifndef('$ubf_type_field_val').
-define('$ubf_type_field_val', true).
-type 'field_val'() :: 
	{ field, name(), 'T-BINARY', 3, val() }.
-endif.

%% field_what()
%%	{ field, name(), 'T-I32', 2, what() }

-ifndef('$ubf_type_field_what').
-define('$ubf_type_field_what', true).
-type 'field_what'() :: 
	{ field, name(), 'T-I32', 2, what() }.
-endif.

%% field_why()
%%	{ field, name(), 'T-BINARY', 3, why() }

-ifndef('$ubf_type_field_why').
-define('$ubf_type_field_why', true).
-type 'field_why'() :: 
	{ field, name(), 'T-BINARY', 3, why() }.
-endif.

%% gen_exc()
%%	{ struct, name(), [field_timestamp() | field_what() | field_why()] }

-ifndef('$ubf_type_gen_exc').
-define('$ubf_type_gen_exc', true).
-type 'gen_exc'() :: 
	{ struct, name(), [field_timestamp() | field_what() | field_why()] }.
-endif.

%% gen_null()
%%	{ struct, null(), [] }

-ifndef('$ubf_type_gen_null').
-define('$ubf_type_gen_null', true).
-type 'gen_null'() :: 
	{ struct, null(), [] }.
-endif.

%% gen_out()
%%	{ struct, name(), [field_timestamp() | field_key() | field_val()] }

-ifndef('$ubf_type_gen_out').
-define('$ubf_type_gen_out', true).
-type 'gen_out'() :: 
	{ struct, name(), [field_timestamp() | field_key() | field_val()] }.
-endif.

%% gen_param_0()
%%	{ field, null(), 'T-STRUCT', 0, gen_out() }

-ifndef('$ubf_type_gen_param_0').
-define('$ubf_type_gen_param_0', true).
-type 'gen_param_0'() :: 
	{ field, null(), 'T-STRUCT', 0, gen_out() }.
-endif.

%% gen_param_1()
%%	{ field, null(), 'T-STRUCT', 1, z_gen_in() | gen_exc() }

-ifndef('$ubf_type_gen_param_1').
-define('$ubf_type_gen_param_1', true).
-type 'gen_param_1'() :: 
	{ field, null(), 'T-STRUCT', 1, z_gen_in() | gen_exc() }.
-endif.

%% gen_param_str()
%%	{ field, null(), 'T-BINARY', 0, gen_string() }

-ifndef('$ubf_type_gen_param_str').
-define('$ubf_type_gen_param_str', true).
-type 'gen_param_str'() :: 
	{ field, null(), 'T-BINARY', 0, gen_string() }.
-endif.

%% gen_params()
%%	{ struct, null(), [gen_param_str() | gen_param_0() | gen_param_1()] }

-ifndef('$ubf_type_gen_params').
-define('$ubf_type_gen_params', true).
-type 'gen_params'() :: 
	{ struct, null(), [gen_param_str() | gen_param_0() | gen_param_1()] }.
-endif.

%% gen_string()
%%	info() | description() | contract()

-ifndef('$ubf_type_gen_string').
-define('$ubf_type_gen_string', true).
-type 'gen_string'() :: 
	info() | description() | contract().
-endif.

%% get()
%%	{ struct, name(), [field_table() | field_key() | field_is_witness()] }

-ifndef('$ubf_type_get').
-define('$ubf_type_get', true).
-type 'get'() :: 
	{ struct, name(), [field_table() | field_key() | field_is_witness()] }.
-endif.

%% info()
%%	binary()

-ifndef('$ubf_type_info').
-define('$ubf_type_info', true).
-type 'info'() :: 
	binary().
-endif.

%% is_witness()
%%	boolean()

-ifndef('$ubf_type_is_witness').
-define('$ubf_type_is_witness', true).
-type 'is_witness'() :: 
	boolean().
-endif.

%% key()
%%	binary()

-ifndef('$ubf_type_key').
-define('$ubf_type_key', true).
-type 'key'() :: 
	binary().
-endif.

%% must_exist()
%%	boolean()

-ifndef('$ubf_type_must_exist').
-define('$ubf_type_must_exist', true).
-type 'must_exist'() :: 
	boolean().
-endif.

%% name()
%%	binary()

-ifndef('$ubf_type_name').
-define('$ubf_type_name', true).
-type 'name'() :: 
	binary().
-endif.

%% null()
%%	binary()

-ifndef('$ubf_type_null').
-define('$ubf_type_null', true).
-type 'null'() :: 
	binary().
-endif.

%% replace()
%%	{ struct, name(), [field_table() | field_key() | field_val()] }

-ifndef('$ubf_type_replace').
-define('$ubf_type_replace', true).
-type 'replace'() :: 
	{ struct, name(), [field_table() | field_key() | field_val()] }.
-endif.

%% seqid()
%%	integer()

-ifndef('$ubf_type_seqid').
-define('$ubf_type_seqid', true).
-type 'seqid'() :: 
	integer().
-endif.

%% set()
%%	{ struct, name(), [field_table() | field_key() | field_val()] }

-ifndef('$ubf_type_set').
-define('$ubf_type_set', true).
-type 'set'() :: 
	{ struct, name(), [field_table() | field_key() | field_val()] }.
-endif.

%% table()
%%	binary()

-ifndef('$ubf_type_table').
-define('$ubf_type_table', true).
-type 'table'() :: 
	binary().
-endif.

%% timestamp()
%%	integer()

-ifndef('$ubf_type_timestamp').
-define('$ubf_type_timestamp', true).
-type 'timestamp'() :: 
	integer().
-endif.

%% ubfproplist()
%%	{ '#P', [{ term(), term() }] }

-ifndef('$ubf_type_ubfproplist').
-define('$ubf_type_ubfproplist', true).
-type 'ubfproplist'() :: 
	{ '#P', [{ term(), term() }] }.
-endif.

%% ubfstring()
%%	{ '#S', [byte()] }

-ifndef('$ubf_type_ubfstring').
-define('$ubf_type_ubfstring', true).
-type 'ubfstring'() :: 
	{ '#S', [byte()] }.
-endif.

%% val()
%%	binary()

-ifndef('$ubf_type_val').
-define('$ubf_type_val', true).
-type 'val'() :: 
	binary().
-endif.

%% what()
%%	integer()

-ifndef('$ubf_type_what').
-define('$ubf_type_what', true).
-type 'what'() :: 
	integer().
-endif.

%% why()
%%	binary()

-ifndef('$ubf_type_why').
-define('$ubf_type_why', true).
-type 'why'() :: 
	binary().
-endif.

%% z_gen_in()
%%	add() | replace() | set() | delete() | get()

-ifndef('$ubf_type_z_gen_in').
-define('$ubf_type_z_gen_in', true).
-type 'z_gen_in'() :: 
	add() | replace() | set() | delete() | get().
-endif.




%% --------------------
%% UBF-RPC anystate
%%

%% ----------
%% add_req
%%
%%{ message, <<"Add">>, 'T-CALL', seqid(), gen_params() } =>
%%   { message, <<"Add">>, 'T-REPLY', seqid(), gen_params() };

%% ----------
%% contract_req
%%
%%{ message, <<"contract">>, 'T-CALL', seqid(), gen_null() } =>
%%   { message, <<"contract">>, 'T-REPLY', seqid(), gen_params() };

%% ----------
%% delete_req
%%
%%{ message, <<"Delete">>, 'T-CALL', seqid(), gen_params() } =>
%%   { message, <<"Delete">>, 'T-REPLY', seqid(), gen_params() };

%% ----------
%% description_req
%%
%%{ message, <<"description">>, 'T-CALL', seqid(), gen_null() } =>
%%   { message, <<"description">>, 'T-REPLY', seqid(), gen_params() };

%% ----------
%% get_req
%%
%%{ message, <<"Get">>, 'T-CALL', seqid(), gen_params() } =>
%%   { message, <<"Get">>, 'T-REPLY', seqid(), gen_params() };

%% ----------
%% info_req
%%
%%{ message, <<"info">>, 'T-CALL', seqid(), gen_null() } =>
%%   { message, <<"info">>, 'T-REPLY', seqid(), gen_params() };

%% ----------
%% keepalive_req
%%
%%{ message, <<"keepalive">>, 'T-CALL', seqid(), gen_null() } =>
%%   { message, <<"keepalive">>, 'T-REPLY', seqid(), gen_null() };

%% ----------
%% replace_req
%%
%%{ message, <<"Replace">>, 'T-CALL', seqid(), gen_params() } =>
%%   { message, <<"Replace">>, 'T-REPLY', seqid(), gen_params() };

%% ----------
%% set_req
%%
%%{ message, <<"Set">>, 'T-CALL', seqid(), gen_params() } =>
%%   { message, <<"Set">>, 'T-REPLY', seqid(), gen_params() };


-endif. % 'gdss.hrl'

