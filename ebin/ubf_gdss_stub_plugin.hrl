
-ifndef('gdss_stub.hrl').
-define('gdss_stub.hrl', true).


%%%
%%% Auto-generated by ubf_utils:ubf_contract()
%%% Do not edit manually!
%%%

%% --------------------
%% pre defined types
%%   - left hand-side is UBF
%%   - right hand-side is Erlang-like
%%   - A() means replace with "A type reference"
%%   - A() | B() means "A() or B()"
%%   - A()? means "optional A()"
%%   - A(Attrs) means "A() subject to the comma-delimited type attributes
%%
%%
%% true
%%		true
%% false
%%		false
%% undefined
%%		undefined
%%
%% any()
%%		any
%% any()?
%%		any | undefined
%%
%% none()
%%		 /* no result is returned */
%% none()?
%%		 /* no result is returned */ | undefined
%%
%% atom()
%%		atom
%% atom()?
%%		atom | undefined
%%
%% binary()
%%		binary
%% binary()?
%%		binary | undefined
%%
%% float()
%%		float
%% float()?
%%		float | undefined
%%
%% integer()
%%		integer
%% integer()?
%%		integer | undefined
%%
%% list()
%%		list
%% list()?
%%		list | undefined
%%
%% tuple()
%%		tuple
%% tuple()?
%%		tuple | undefined
%%
%% --------------------
%% type attributes
%%
%%
%% any(AnyAttrs)
%%		any
%% any(AnyAttrs)?
%%		any | undefined
%%
%% atom(AtomAttrs)
%%		atom
%% atom(AtomAttrs)?
%%		atom | undefined
%%
%% binary(BinaryAttrs)
%%		binary
%% binary(BinaryAttrs)?
%%		binary | undefined
%%
%% list(ListAttrs)
%%		list
%% list(ListAttrs)?
%%		list | undefined
%%
%% tuple(TupleAttrs)
%%		tuple
%% tuple(TupleAttrs)?
%%		tuple | undefined
%%
%%
%% AnyAttrs
%% 	 nonempty
%% 	 nonundefined
%%
%% AtomAttrs
%% 	 ascii | asciiprintable
%% 	 nonempty
%% 	 nonundefined
%%
%% BinaryAttrs
%% 	 ascii | asciiprintable
%% 	 nonempty
%%
%% ListAttrs
%% 	 nonempty
%%
%% TupleAttrs
%% 	 nonempty
%%
%% --------------------
%% user-defined attributes
%%
%%
%% {type1() ...}
%%		tuple
%% {type1() ...}?
%%		tuple | undefined
%%
%% record()
%%		record
%% record()?
%%		record | undefined
%%
%% [type()]
%%		list of type()
%% [type()]?
%%		list of length 0 or length 1 of type()
%% [type()]+
%%		list of length greater than 0 of type()
%% [type()]{M}
%%		list of length M of type()
%% [type()]{M,}
%%		list of minimum length M of type()
%% [type()]{,M}
%%		list of maximum length M of type()
%% [type()]{M,N}
%%		list of minimum length M and maximum length N of type()
%%
%% integer()..integer()
%%		integer
%% ..integer()
%%		integer
%% integer()..
%%		integer


%% --------------------
%% records
%%





%% --------------------
%% leaf types
%%


%% add()
%%	{ add, key(), ts(), val(), exp_time(), flags_list() }

-ifndef('$ubf_type_add').
-define('$ubf_type_add', true).
-type 'add'() :: 
	{ add, key(), ts(), val(), exp_time(), flags_list() }.
-endif.

%% brick_status_res()
%%	{ ok, term() } | noproc

-ifndef('$ubf_type_brick_status_res').
-define('$ubf_type_brick_status_res', true).
-type 'brick_status_res'() :: 
	{ ok, term() } | noproc.
-endif.

%% delete()
%%	{ delete, key(), flags_list() }

-ifndef('$ubf_type_delete').
-define('$ubf_type_delete', true).
-type 'delete'() :: 
	{ delete, key(), flags_list() }.
-endif.

%% do1_res_fail()
%%	{ key_exists, ts() } | key_not_exist | { ts_error, ts() } | { val_error, len() } | invalid_flag_present | brick_not_available

-ifndef('$ubf_type_do1_res_fail').
-define('$ubf_type_do1_res_fail', true).
-type 'do1_res_fail'() :: 
	{ key_exists, ts() } | key_not_exist | { ts_error, ts() } | { val_error, len() } | invalid_flag_present | brick_not_available.
-endif.

%% do1_res_ok()
%%	ok | key_not_exist | { ok, ts() } | { ok, ts(), time_t(), flags_list() } | { ok, ts(), val() } | { ok, ts(), val(), time_t(), flags_list() } | { ok, { [{ key(), ts() }], boolean() } } | { ok, { [{ key(), ts(), time_t(), flags_list() }], boolean() } } | { ok, { [{ key(), ts(), val() }], boolean() } } | { ok, { [{ key(), ts(), val(), time_t(), flags_list() }], boolean() } } | txn

-ifndef('$ubf_type_do1_res_ok').
-define('$ubf_type_do1_res_ok', true).
-type 'do1_res_ok'() :: 
	ok | key_not_exist | { ok, ts() } | { ok, ts(), time_t(), flags_list() } | { ok, ts(), val() } | { ok, ts(), val(), time_t(), flags_list() } | { ok, { [{ key(), ts() }], boolean() } } | { ok, { [{ key(), ts(), time_t(), flags_list() }], boolean() } } | { ok, { [{ key(), ts(), val() }], boolean() } } | { ok, { [{ key(), ts(), val(), time_t(), flags_list() }], boolean() } } | txn.
-endif.

%% do_flags_list()
%%	[] | [sync_override]

-ifndef('$ubf_type_do_flags_list').
-define('$ubf_type_do_flags_list', true).
-type 'do_flags_list'() :: 
	[] | [sync_override].
-endif.

%% do_op_flag()
%%	{ testset, ts() } | witness | get_all_attribs | { max_bytes, integer() } | { max_num, integer() } | { binary_prefix, binary() } | must_exist | must_not_exist | value_in_ram | { exp_time_directive, keep | replace } | { attrib_directive, keep | replace } | { val_len, len() } | { term(), term() } | atom()

-ifndef('$ubf_type_do_op_flag').
-define('$ubf_type_do_op_flag', true).
-type 'do_op_flag'() :: 
	{ testset, ts() } | witness | get_all_attribs | { max_bytes, integer() } | { max_num, integer() } | { binary_prefix, binary() } | must_exist | must_not_exist | value_in_ram | { exp_time_directive, keep | replace } | { attrib_directive, keep | replace } | { val_len, len() } | { term(), term() } | atom().
-endif.

%% do_op_list()
%%	[txn() | z_do1_op()]

-ifndef('$ubf_type_do_op_list').
-define('$ubf_type_do_op_list', true).
-type 'do_op_list'() :: 
	[txn() | z_do1_op()].
-endif.

%% do_res()
%%	[do1_res_ok() | do1_res_fail()] | do_res_fail()

-ifndef('$ubf_type_do_res').
-define('$ubf_type_do_res', true).
-type 'do_res'() :: 
	[do1_res_ok() | do1_res_fail()] | do_res_fail().
-endif.

%% do_res_fail()
%%	{ txn_fail, [{ integer(), do1_res_fail() }] }

-ifndef('$ubf_type_do_res_fail').
-define('$ubf_type_do_res_fail', true).
-type 'do_res_fail'() :: 
	{ txn_fail, [{ integer(), do1_res_fail() }] }.
-endif.

%% exp_time()
%%	time_t()

-ifndef('$ubf_type_exp_time').
-define('$ubf_type_exp_time', true).
-type 'exp_time'() :: 
	time_t().
-endif.

%% flags_list()
%%	[do_op_flag()]

-ifndef('$ubf_type_flags_list').
-define('$ubf_type_flags_list', true).
-type 'flags_list'() :: 
	[do_op_flag()].
-endif.

%% get()
%%	{ get, key(), flags_list() }

-ifndef('$ubf_type_get').
-define('$ubf_type_get', true).
-type 'get'() :: 
	{ get, key(), flags_list() }.
-endif.

%% get_many()
%%	{ get_many, key(), flags_list() }

-ifndef('$ubf_type_get_many').
-define('$ubf_type_get_many', true).
-type 'get_many'() :: 
	{ get_many, key(), flags_list() }.
-endif.

%% get_many_res()
%%	do1_res_ok() | do1_res_fail() | do_res_fail()

-ifndef('$ubf_type_get_many_res').
-define('$ubf_type_get_many_res', true).
-type 'get_many_res'() :: 
	do1_res_ok() | do1_res_fail() | do_res_fail().
-endif.

%% key()
%%	binary()

-ifndef('$ubf_type_key').
-define('$ubf_type_key', true).
-type 'key'() :: 
	binary().
-endif.

%% len()
%%	integer()

-ifndef('$ubf_type_len').
-define('$ubf_type_len', true).
-type 'len'() :: 
	integer().
-endif.

%% not_implemented()
%%	not_implemented

-ifndef('$ubf_type_not_implemented').
-define('$ubf_type_not_implemented', true).
-type 'not_implemented'() :: 
	not_implemented.
-endif.

%% rename()
%%	{ rename, key(), ts(), key(), exp_time(), flags_list() }

-ifndef('$ubf_type_rename').
-define('$ubf_type_rename', true).
-type 'rename'() :: 
	{ rename, key(), ts(), key(), exp_time(), flags_list() }.
-endif.

%% replace()
%%	{ replace, key(), ts(), val(), exp_time(), flags_list() }

-ifndef('$ubf_type_replace').
-define('$ubf_type_replace', true).
-type 'replace'() :: 
	{ replace, key(), ts(), val(), exp_time(), flags_list() }.
-endif.

%% set()
%%	{ set, key(), ts(), val(), exp_time(), flags_list() }

-ifndef('$ubf_type_set').
-define('$ubf_type_set', true).
-type 'set'() :: 
	{ set, key(), ts(), val(), exp_time(), flags_list() }.
-endif.

%% table()
%%	atom(nonempty,nonundefined)

-ifndef('$ubf_type_table').
-define('$ubf_type_table', true).
-type 'table'() :: 
	atom().
-endif.

%% time_t()
%%	integer()

-ifndef('$ubf_type_time_t').
-define('$ubf_type_time_t', true).
-type 'time_t'() :: 
	integer().
-endif.

%% ts()
%%	integer()

-ifndef('$ubf_type_ts').
-define('$ubf_type_ts', true).
-type 'ts'() :: 
	integer().
-endif.

%% txn()
%%	txn

-ifndef('$ubf_type_txn').
-define('$ubf_type_txn', true).
-type 'txn'() :: 
	txn.
-endif.

%% ubfproplist()
%%	{ '#P', [{ term(), term() }] }

-ifndef('$ubf_type_ubfproplist').
-define('$ubf_type_ubfproplist', true).
-type 'ubfproplist'() :: 
	{ '#P', [{ term(), term() }] }.
-endif.

%% ubfstring()
%%	{ '#S', [byte()] }

-ifndef('$ubf_type_ubfstring').
-define('$ubf_type_ubfstring', true).
-type 'ubfstring'() :: 
	{ '#S', [byte()] }.
-endif.

%% val()
%%	binary()

-ifndef('$ubf_type_val').
-define('$ubf_type_val', true).
-type 'val'() :: 
	binary().
-endif.

%% z_do1_op()
%%	add() | delete() | get() | get_many() | replace() | set() | rename()

-ifndef('$ubf_type_z_do1_op').
-define('$ubf_type_z_do1_op', true).
-type 'z_do1_op'() :: 
	add() | delete() | get() | get_many() | replace() | set() | rename().
-endif.




%% --------------------
%% UBF-RPC anystate
%%

%% ----------
%% add_req
%%
%%{ add, table(), key(), val(), exp_time(), flags_list(), timeout() } =>
%%   do1_res_ok() | do1_res_fail() | do_res_fail();

%% ----------
%% brick_status_req
%%
%%{ brick_status, atom(), atom(), timeout() } =>
%%   not_implemented;

%% ----------
%% contract
%%
%%contract =>
%%   any();

%% ----------
%% delete_req
%%
%%{ delete, table(), key(), flags_list(), timeout() } =>
%%   do1_res_ok() | do1_res_fail() | do_res_fail();

%% ----------
%% description
%%
%%description =>
%%   [char()];

%% ----------
%% do_req
%%
%%{ do, table(), do_op_list(), do_flags_list(), timeout() } =>
%%   do_res() | not_implemented();

%% ----------
%% get_many_req
%%
%%{ get_many, table(), key(), integer(), flags_list(), timeout() } =>
%%   not_implemented;

%% ----------
%% get_req
%%
%%{ get, table(), key(), flags_list(), timeout() } =>
%%   do1_res_ok() | do1_res_fail() | do_res_fail();

%% ----------
%% info
%%
%%info =>
%%   [char()];

%% ----------
%% keepalive_req
%%
%%keepalive =>
%%   ok | { error, term() };

%% ----------
%% rename_req
%%
%%{ rename, table(), key(), key(), exp_time(), flags_list(), timeout() } =>
%%   do1_res_ok() | do1_res_fail() | do_res_fail();

%% ----------
%% replace_req
%%
%%{ replace, table(), key(), val(), exp_time(), flags_list(), timeout() } =>
%%   do1_res_ok() | do1_res_fail() | do_res_fail();

%% ----------
%% set_req
%%
%%{ set, table(), key(), val(), exp_time(), flags_list(), timeout() } =>
%%   do1_res_ok() | do1_res_fail() | do_res_fail();


-endif. % 'gdss_stub.hrl'

