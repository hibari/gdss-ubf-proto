%%% -*- mode: erlang -*-

%%%----------------------------------------------------------------------
%%% Copyright (c) 2009-2017 Hibari developers.  All rights reserved.
%%%
%%% Licensed under the Apache License, Version 2.0 (the "License");
%%% you may not use this file except in compliance with the License.
%%% You may obtain a copy of the License at
%%%
%%%     http://www.apache.org/licenses/LICENSE-2.0
%%%
%%% Unless required by applicable law or agreed to in writing, software
%%% distributed under the License is distributed on an "AS IS" BASIS,
%%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%% See the License for the specific language governing permissions and
%%% limitations under the License.
%%%
%%% File    : tbf_gdss_plugin.con
%%% Purpose : native tbf gdss plugin contract
%%%----------------------------------------------------------------------

+NAME("gdss").

+VSN("tbf2.0").

+TYPES

is_witness()      :: boolean();
key()             :: binary();
must_exist()      :: boolean();
name()            :: binary();
null()            :: binary();
seqid()           :: integer();
table()           :: binary();
timestamp()       :: integer();
val()             :: binary();
what()            :: integer();
why()             :: binary();

info()            :: binary();
description()     :: binary();
contract()        :: binary();

field_is_witness():: {field, name(), 'T-BOOL', 3, is_witness()};
field_key()       :: {field, name(), 'T-BINARY', 2, key()};
field_must_exist():: {field, name(), 'T-BOOL', 3, must_exist()};
field_table()     :: {field, name(), 'T-BINARY', 1, table()};
field_timestamp() :: {field, name(), 'T-I64', 1, timestamp()};
field_val()       :: {field, name(), 'T-BINARY', 3, val()};
field_what()      :: {field, name(), 'T-I32', 2, what()};
field_why()       :: {field, name(), 'T-BINARY', 3, why()};

%% Prefix "z_" is required to avoid a type spec warning.
%% See: https://github.com/ubf/ubf/issues/13
z_gen_in()        :: add() | replace() | set() | delete() | get();
gen_string()      :: info() | description() | contract();
gen_out()         :: {struct, name(), [field_timestamp() | field_key() | field_val()]};
gen_exc()         :: {struct, name(), [field_timestamp() | field_what() | field_why()]};
gen_null()        :: {struct, null(), []};

gen_param_str()   :: {field, null(), 'T-BINARY', 0, gen_string()};
gen_param_0()     :: {field, null(), 'T-STRUCT', 0, gen_out()};
gen_param_1()     :: {field, null(), 'T-STRUCT', 1, z_gen_in() | gen_exc()};
gen_params()      :: {struct, null(), [gen_param_str() | gen_param_0() | gen_param_1()]};

add()             :: {struct, name(), [field_table() | field_key() | field_val()]};
add_req()         :: {message, <<"Add">>, 'T-CALL', seqid(), gen_params()};
add_res()         :: {message, <<"Add">>, 'T-REPLY', seqid(), gen_params()};

replace()         :: {struct, name(), [field_table() | field_key() | field_val()]};
replace_req()     :: {message, <<"Replace">>, 'T-CALL', seqid(), gen_params()};
replace_res()     :: {message, <<"Replace">>, 'T-REPLY', seqid(), gen_params()};

set()             :: {struct, name(), [field_table() | field_key() | field_val()]};
set_req()         :: {message, <<"Set">>, 'T-CALL', seqid(), gen_params()};
set_res()         :: {message, <<"Set">>, 'T-REPLY', seqid(), gen_params()};

delete()          :: {struct, name(), [field_table() | field_key() | field_must_exist()]};
delete_req()      :: {message, <<"Delete">>, 'T-CALL', seqid(), gen_params()};
delete_res()      :: {message, <<"Delete">>, 'T-REPLY', seqid(), gen_params()};

get()             :: {struct, name(), [field_table() | field_key() | field_is_witness()]};
get_req()         :: {message, <<"Get">>, 'T-CALL', seqid(), gen_params()};
get_res()         :: {message, <<"Get">>, 'T-REPLY', seqid(), gen_params()};

keepalive_req()   :: {message, <<"keepalive">>, 'T-CALL', seqid(), gen_null()};
keepalive_res()   :: {message, <<"keepalive">>, 'T-REPLY', seqid(), gen_null()};

info_req()        :: {message, <<"info">>, 'T-CALL', seqid(), gen_null()};
info_res()        :: {message, <<"info">>, 'T-REPLY', seqid(), gen_params()};

description_req() :: {message, <<"description">>, 'T-CALL', seqid(), gen_null()};
description_res() :: {message, <<"description">>, 'T-REPLY', seqid(), gen_params()};

contract_req()    :: {message, <<"contract">>, 'T-CALL', seqid(), gen_null()};
contract_res()    :: {message, <<"contract">>, 'T-REPLY', seqid(), gen_params()}.


+ANYSTATE

%% Simplified API
add_req()         => add_res();
replace_req()     => replace_res();
set_req()         => set_res();
delete_req()      => delete_res();
get_req()         => get_res();

%% others
keepalive_req()   => keepalive_res();
info_req()        => info_res();
description_req() => description_res();
contract_req()    => contract_res().

