%%% -*- mode: erlang -*-

%%%----------------------------------------------------------------------
%%% Copyright (c) 2009-2010 Gemini Mobile Technologies, Inc.  All rights reserved.
%%%
%%% Licensed under the Apache License, Version 2.0 (the "License");
%%% you may not use this file except in compliance with the License.
%%% You may obtain a copy of the License at
%%%
%%%     http://www.apache.org/licenses/LICENSE-2.0
%%%
%%% Unless required by applicable law or agreed to in writing, software
%%% distributed under the License is distributed on an "AS IS" BASIS,
%%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%% See the License for the specific language governing permissions and
%%% limitations under the License.
%%%
%%% File    : ubf_gdss_plugin_v01.con
%%% Purpose : ubf gdss plugin contract v01
%%%----------------------------------------------------------------------

+NAME("gdss_v01").

+VSN("ubf1.0").

%%
%% ToDo:
%%  - for test purposes only, add special do commands for each
%%    operation do_add(), do_delete(), ... etc.  This will permit
%%    checking the explicit result types for each operation. The default
%%    do and transaction commands force a union of the result types over
%%    all operations
%%


%%%%%%
+TYPES


%%%%%
%% Basics
boolean() = true | false;
exp_time() = 0; %% DISABLE time_t();
key() = binary();
len() = non_neg_integer();
node() = atom(nonempty,nonundefined);
non_neg_integer() = 0..;
prop() = foobar | {foo,bar}; %% DISABLE {atom(), term()} | atom();
table() = atom(nonempty,nonundefined);
time_t() = non_neg_integer();
timeout() = infinity | non_neg_integer();
ts() = non_neg_integer();
val() = binary();

%%%%%
%% Flags

%% Read/Write Operation
must_exist() = must_exist;
%% UNUSED must_not_exist() = must_not_exist;
sync_override() = sync_override;
testset() = {testset, ts()};
value_in_ram() = value_in_ram;

%% Read-Only Operation
binary_prefix() = {binary_prefix, binary()};
get_all_attribs() = get_all_attribs;
maxnum() = {max_num, non_neg_integer()};
quota_bytes_used() = {quota_bytes_used, non_neg_integer()}; %% BUG 28469
quota_items_used() = {quota_items_used, non_neg_integer()}; %% BUG 28469
witness() = witness;


%%%%%
%% Operations

%% Write
add() = {add, key(), ts(), val(), exp_time(), add_flags()};
add_flags() = [value_in_ram() | prop()];
add_res() = add_res_ok() | add_res_err();
add_res_ok() = ok;
add_res_err() = key_exists() | gen_err();

delete() = {delete, key(), delete_flags()};
delete_flags() = [testset() | must_exist()];
delete_res() = delete_res_ok() | delete_res_err();
delete_res_ok() = ok;
delete_res_err() = key_not_exist() | ts_err() | gen_err();

replace() = {replace, key(), ts(), val(), exp_time(), replace_flags()};
replace_flags() = [testset() | value_in_ram() | prop()];
replace_res() = replace_res_ok() | replace_res_err();
replace_res_ok() = ok;
replace_res_err() = key_not_exist() | ts_err() | gen_err();

set() = {set, key(), ts(), val(), exp_time(), set_flags()};
set_flags() = [testset() | value_in_ram() | prop()];
set_res() = set_res_ok() | set_res_err();
set_res_ok() = ok;
set_res_err() = key_not_exist() | ts_err() | gen_err();


%% Read
get() = {get, key(), get_flags()};
get_flags() = [testset() | witness() | get_all_attribs()];
get_res() = get_res_ok() | get_res_err();
get_res_ok() = {ok, ts()} | {ok, ts(), val()} | {ok, ts(), get_res_flags()} | {ok, ts(), val(), time_t(), get_res_flags()};
get_res_flags() = [{val_len, len()} | value_in_ram() | quota_items_used() | quota_bytes_used() | prop()];
get_res_err() = key_not_exist() | ts_err() | gen_err();

get_many() = {get_many, key(), get_many_flags()};
get_many_flags() = [binary_prefix() | maxnum() | witness() | get_all_attribs()];
get_many_res() = get_many_res_ok() | get_many_res_err();
get_many_res_ok() = {ok, {get_many_res_list(), boolean()}};
get_many_res_list() = [{key(), ts()}]
                    | [{key(), ts(), get_many_res_flags()}]
                    | [{key(), ts(), val(), time_t(), get_many_res_flags()}];
get_many_res_flags() = [{val_len, len()} | value_in_ram() | quota_items_used() | quota_bytes_used() | prop()];
get_many_res_err() = gen_err();


%% Do
do() = {do, table(), [do_op()]+, do_flags(), timeout()};
do_op() = add() | delete() | replace() | set() | get() | get_many();
do_flags() = [sync_override()];
do_res() = do_res_ok() | do_res_err();
do_res_ok() = [do_op_res()];
do_op_res() = add_res() | delete_res() | replace_res() | set_res() | get_res() | get_many_res();
do_res_err() = txn_fail() | do_res_err();


%% Transaction
txn() = {txn, table(), [do_op()]+, txn_flags(), timeout()};
txn_flags() = do_flags();
txn_res() = txn_res_ok() | txn_res_err();
txn_res_ok() = do_res_ok();
txn_res_err() = do_res_err();


%%%%%
%% Errors

%% Key
key_exists() = {key_exists,ts()};
key_not_exist() = key_not_exist;

%% Timestamp
ts_err() = {ts_error, ts()};

%% Transaction
txn_fail() = {txn_fail, [{integer(), term()}]};

%% Generic
gen_err() = brick_not_available()
          | invalid_flag_present()
          | nodedown_err()
%% TBD      | nodedown_exit()
          | noproc_err()
%% TBD      | noproc_exit()
          | timeout_err()
%% TBD      | timeout_exit()
          | wrong_brick()
;
brick_not_available() = brick_not_available;
invalid_flag_present() = invalid_flag_present;
nodedown_err() = {{nodedown,node()},{gen_server,call,term()}};
%% TBD: nodedown_exit() = {'EXIT', nodedown_err()};
noproc_err() = {noproc,{gen_server,call,term()}};
%% TBD: noproc_exit() = {'EXIT', noproc_err()};
timeout_err() = {timeout,{gen_server,call,term()}};
%% TBD: timeout_exit() = {'EXIT', timeout_err()};
wrong_brick() = {wrong_brick,term()};


%%%%%
%%% keepalive
keepalive_req()         = keepalive;
keepalive_res()         = ok;


%%%%%
%%% meta methods
info_req()              = info;
info_res()              = string();

description_req()       = description;
description_res()       = string();

contract_req()          = contract;
contract_res()          = term().


%%%%%
%%% anystate
+ANYSTATE

%% do operation
do()                    => do_res();

%% transaction operation
txn()                   => txn_res();

%% keepalive
keepalive_req()         => keepalive_res();

%% meta methods
info_req()              => info_res();
description_req()       => description_res();
contract_req()          => contract_res().
